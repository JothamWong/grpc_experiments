import argparse

if __name__ == "__main__":
    argparser = argparse.ArgumentParser("Generate grpc server")
    argparser.add_argument("-n", "--n_messages", type=int, help="Num message types")
    args = argparser.parse_args()
    n_messages = args.n_messages
    program = ['''// This file is automatically generated. Do not modify.
#include <myproto/message.grpc.pb.h>
#include <grpc/grpc.h>
#include <grpcpp/server_builder.h>
#include <iostream>

class MessageService final : public protobenchmark::Messages::Service {
public:
  virtual ::grpc::Status GetM0(::grpc::ServerContext *context,
                               const google::protobuf::Empty *request,
                               google::protobuf::Empty *result) {
    std::cout << "Server: Received M0 call " << std::endl;
    return grpc::Status::OK;
  }
    ''']
    for m in range(1, n_messages+1):
        program.append(f'''virtual ::grpc::Status GetM{m}(::grpc::ServerContext *context, const ::protobenchmark::M{m} *request, ::protobenchmark::M{m} *m{m}) {{
    std::cout << "Server: Received M{m} call " << std::endl;
    return grpc::Status::OK;
    }}
            ''')
    program.append("};")
    program.append('''int main(int argc, char *argv[]) {
    std::cout << "Server starting!" << std::endl;
    grpc::ServerBuilder builder;
    builder.AddListeningPort("0.0.0.0:50051", grpc::InsecureServerCredentials());
    MessageService message_service;
    builder.RegisterService(&message_service);
    std::unique_ptr<grpc::Server> server(builder.BuildAndStart());
    server->Wait();
    return 0;
    }
    ''')
    program_string = "\n".join(program)
    with open("src/main.cpp", "w") as outf:
        outf.write(program_string)